# Generated by Django 5.0.6 on 2025-08-21 13:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Gate',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('a9c87951-3961-4c81-b020-d12548fd14db'), editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('entry', 'ENTRY'), ('exit', 'EXIT')], max_length=15)),
                ('location', models.CharField(blank=True, max_length=120)),
            ],
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('pricing_rule', models.JSONField(default=dict)),
                ('currency', models.CharField(default='VND', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.UUID('dd415d6e-c587-4218-b089-f70d2c0b0d8e'), editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=120)),
                ('phone', models.CharField(blank=True, max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ParkingSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entry_time', models.DateTimeField(auto_now_add=True)),
                ('exit_time', models.DateTimeField(blank=True, null=True)),
                ('entry_plate', models.CharField(blank=True, max_length=20, null=True)),
                ('exit_plate', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(choices=[('open', 'OPEN'), ('closed', 'CLOSED')], default='OPEN', max_length=10)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('entry_gate', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='entries', to='app.gate')),
                ('exit_gate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='exits', to='app.gate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='session', to=settings.AUTH_USER_MODEL)),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.tariff')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('currency', models.CharField(default='VND', max_length=8)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'PENDING'), ('failed', 'FAILED'), ('refunded', 'REFUNDED')], default='PENDING', max_length=15)),
                ('tx_ref', models.CharField(blank=True, max_length=100)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='app.parkingsession')),
            ],
        ),
        migrations.CreateModel(
            name='PlateReading',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image_path', models.CharField(blank=True, max_length=255)),
                ('plate_text', models.CharField(max_length=20)),
                ('confidence', models.FloatField(default=0.0)),
                ('captured_at', models.DateTimeField(auto_now_add=True)),
                ('gate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.gate')),
                ('session', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.parkingsession')),
            ],
        ),
        migrations.CreateModel(
            name='QRCode',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('1ac300b7-7bd6-4e12-a174-f8e5d02dde07'), editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=128, unique=True)),
                ('status', models.PositiveSmallIntegerField(choices=[('active', 'ACTIVE'), ('revoked', 'REVOKED'), ('expired', 'EXPIRED')], default='ACTIVE')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expired_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='qr', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.UUID('df906416-3582-425a-bfcd-351b43859927'), editable=False, primary_key=True, serialize=False)),
                ('plateNumber', models.CharField(max_length=15)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='parkingsession',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='session', to='app.vehicle'),
        ),
    ]
